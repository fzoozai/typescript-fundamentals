{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"AAAA;AAQA,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,EAAD,EAIV;MAHf,IAAI,GAAA,EAAA,CAAA;MACJ,YAAY,GAAA,EAAA,CAAA;MACZ,KAAK,GAAA,EAAA,CAAA;AAEL,EAAA,OAAO,CAAC,GAAR,CAAY;AAAE,IAAA,IAAI,EAAA,IAAN;AAAQ,IAAA,KAAK,EAAA;AAAb,GAAZ;AACA,SAAO;AAAE,IAAA,IAAI,EAAA,IAAN;AAAQ,IAAA,KAAK,EAAA;AAAb,GAAP;AACD,CAPD;;AASA,kBAAkB,CAAC;AAAE,EAAA,IAAI,EAAE,cAAR;AAAwB,EAAA,YAAY,EAAE,KAAtC;AAA6C,EAAA,KAAK,EAAE;AAApD,CAAD,CAAlB,EAEA;AAEA;;AACA,IAAK,WAAL;;AAAA,CAAA,UAAK,WAAL,EAAgB;AACd,EAAA,WAAA,CAAA,WAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,WAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAK,WAAW,KAAX,WAAW,GAAA,EAAA,CAAhB,GAMA;;;AACA,IAAK,OAAL;;AAAA,CAAA,UAAK,OAAL,EAAY;AACV,EAAA,OAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,OAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,OAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAK,OAAO,KAAP,OAAO,GAAA,EAAA,CAAZ;;AAMA,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,OAAD,EAAiB,CAAO,CAA9C;;AACA,aAAa,CAAC,OAAO,CAAC,QAAT,CAAb;AACA,OAAO,CAAC,GAAR,CAAY,OAAO,CAAC,QAApB,GAEA;;AAEA,IAAA,QAAA;AAAA;AAAA,YAAA;AAGE,WAAA,QAAA,CAAY,KAAZ,EAAiB;AACf,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,IAAA,OAAO,CAAC,GAAR,CAAY,KAAK,KAAjB;AACA,WAAO,KAAK,KAAZ;AACD,GAHD;;AAIF,SAAA,QAAA;AAXA,CAAA,EAAA;;AAaA,IAAM,OAAO,GAAG,IAAI,QAAJ,CAAa,GAAb,CAAhB;AACA,OAAO,CAAC,UAAR,IAEA;;AAEA,IAAM,WAAW,GAAG,SAAd,WAAc,CAAI,KAAJ,EAAY;AAC9B,EAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACA,SAAO,KAAP;AACD,CAHD,EAKA;;;AAEA,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA,CAIC;;AAAD,SAAA,SAAA;AAJA,CAAA,EAAA;;AAMA,IAAM,KAAK,GAAG;AACZ,EAAA,IAAI,EAAE,KADM;AAEZ,EAAA,KAAK,EAAE;AAFK,CAAd;AAKA,IAAI,QAAQ,GAAmB,IAAI,SAAJ,EAA/B;AACA,QAAQ,GAAG,KAAX","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["// Interfaces\n\ninterface CryptoCurrency {\n  name: string;\n  abbreviation?: string;\n  price: number;\n}\n\nconst printCryptoDetails = ({\n  name,\n  abbreviation,\n  price,\n}: CryptoCurrency): CryptoCurrency => {\n  console.log({ name, price });\n  return { name, price };\n};\n\nprintCryptoDetails({ name: \"Binance Coin\", abbreviation: \"BNB\", price: 240 });\n\n// Enums used for example: if you need a list of exact items\n\n// numeric enums\nenum CarTypeNums {\n  ELECTRIC, // 0\n  HYBRID, // 1\n  PETROL, // 2\n}\n\n// string enums\nenum CarType {\n  ELECTRIC = \"ELECTRIC\",\n  HYBRID = \"HYBRID\",\n  PETROL = \"PETROL\",\n}\n\nconst createCarType = (carType: CarType) => {};\ncreateCarType(CarType.ELECTRIC);\nconsole.log(CarType.ELECTRIC);\n\n// Classes\n\nclass Currency {\n  price: number;\n\n  constructor(price) {\n    this.price = price;\n  }\n\n  printValue(): number {\n    console.log(this.price);\n    return this.price;\n  }\n}\n\nconst binance = new Currency(241);\nbinance.printValue();\n\n// Generics\n\nconst outputInput = <T>(input: T): T => {\n  console.log(input);\n  return input;\n};\n\n// Duck typing\n\nclass CryptoWiz implements CryptoCurrency {\n  name: string;\n  abbreviation?: string;\n  price: number;\n}\n\nconst dummy = {\n  name: \"BNB\",\n  price: 250,\n};\n\nlet currency: CryptoCurrency = new CryptoWiz();\ncurrency = dummy;\n"]}